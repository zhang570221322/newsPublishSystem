<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"

>
    <context:annotation-config/> <!-- 支持一个标签-->
    <!-- 第二种方式：加载多个properties文件   -->
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <!--<value>classpath:common.properties</value>-->
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>


    <!--  配置数据库连接池 druid -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.connectionURL}"/>
        <property name="username" value="${jdbc.userId}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${initialSize}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxActive" value="${maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="testOnReturn" value="${testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="${filters}"/>
    </bean>
    <!-- 让spring管理sqlsessionfactory(使用mybatis和spring整合包中的) -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

  <!--事物-->
    <!-- 配置事务管理 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--注解事物-->
  <tx:annotation-driven    proxy-target-class="true"  transaction-manager="transactionManager" />


   <!--切面事物-->
    <!-- 事务相关控制配置：例如配置事务的传播机制 -->
    <!--<tx:advice id="iccardTxAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="save*" propagation="REQUIRED" />-->
            <!--<tx:method name="insert*" propagation="REQUIRED" />-->
            <!--<tx:method name="delete*" propagation="REQUIRED" />-->
            <!--<tx:method name="update*" propagation="REQUIRED" />-->
            <!--<tx:method name="select*" propagation="REQUIRED" />-->
            <!--<tx:method name="find*" propagation="SUPPORTS" read-only="true" />-->
            <!--<tx:method name="get*" propagation="SUPPORTS" read-only="true" />-->
            <!--<tx:method name="list*" propagation="SUPPORTS" read-only="true" />-->
            <!--<tx:method name="remove*" propagation="SUPPORTS" read-only="true" />-->
            <!--<tx:method name="count*" propagation="SUPPORTS" read-only="true" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--<aop:config  proxy-target-class="true">-->
        <!--<aop:pointcut id="iccardTerm" expression="execution(public * service.*.*(..))" />-->
        <!--<aop:advisor pointcut-ref="iccardTerm" advice-ref="iccardTxAdvice" />-->
    <!--</aop:config>-->


    <!-- mapper扫描器 -->
    <!--扫描路径下的 mapper 接口和 对应的xml, 但是XML重复就会重复生成代理对象,取最后一个-->

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <!--扫描服务层-->
    <context:component-scan base-package="service"/>
    <!--扫描domain层-->
    <context:component-scan base-package="model"/>

    <!--扫描util层-->
    <context:component-scan base-package="util"/>
</beans>
